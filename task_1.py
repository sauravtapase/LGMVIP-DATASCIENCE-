# -*- coding: utf-8 -*-
"""TASK 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16PUd0mVIfc8Gqafp2tq7cEuw6GB6F8TF

LGMVIP - DATA SCIENCE
AUTHOR - SAURAV TAPASE
TASK - IRIS FLOWERS CLASSIFICATION
Dataset link : http://archive.ics.uci.edu/ml/datasets/Iris

Importing libraries
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing all the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,confusion_matrix

"""Loading the dataset"""

df = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data',
                names=["sepal_length_in_cm","sepal_width_in_cm","petal_length_in_cm","petal_width_in_cm","class"])

df.head()

df.shape

"""Data Visualization"""

fig,(ax1,ax2)=plt.subplots(ncols=2,figsize=(16,5))
sns.scatterplot(x='sepal_length_in_cm',y='petal_length_in_cm',data=df,hue='class',ax=ax1)
sns.scatterplot(x='sepal_width_in_cm',y='petal_width_in_cm',data=df,hue='class',ax=ax2)

sns.pairplot(df,hue="class")

sns.heatmap(df.corr(), annot=True)

"""Building the model , training and testing"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df['class'] = le.fit_transform = (df['class'])
df.head()

from sklearn.model_selection import train_test_split
X = df.drop(columns=['class'])
Y = df['class']
x_train , x_test , y_train , y_test = train_test_split(X , Y , test_size = 0.2)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(x_train , y_train)

print('Accuracy of the model :',model.score(x_test , y_test)* 100)

model = KNeighborsClassifier()

model.fit(x_train, y_train)

print("Accuracy: ",model.score(x_test, y_test) * 100)

# decision tree
model = DecisionTreeClassifier()

model.fit(x_train, y_train)

# print metric to get performance
print("Accuracy: ",model.score(x_test, y_test) * 100)